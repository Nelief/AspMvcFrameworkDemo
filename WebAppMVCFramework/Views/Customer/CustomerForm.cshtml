@* Aggiungi il model del oggetto che il form andrà a creare *@

@model WebAppMVCFramework.DTO.CustomerFormDTO
@using WebAppMVCFramework.Helpers

@{
    ViewBag.Title = "Customer Form";
}

<h2 class="d-flex justify-content-center">Customer Form</h2>

@* Inizio del form, è importante specificare il giusto model di riferimento *@
@using (Html.BeginForm("Save", "Customer"))
{
    <div class="d-flex justify-content-center">
        @Html.ValidationSummary(true, "Please Fix the errors before saving the new Customer")
    </div>

    <div class="d-flex justify-content-center">
        <div class="d-flex flex-column  gap-3 align-content-center">
            <div class="d-flex flex-row justify-content-between  gap-5 ">
                <div class="form-group">
                    @Html.LabelFor(x => x.Customer.Name, "Nome")
                    @Html.TextBoxFor(x => x.Customer.Name, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Customer.Name)
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.Customer.Cognome, "Cognome")
                    @Html.TextBoxFor(x => x.Customer.Cognome, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Customer.Cognome)
                </div>
            </div>
            <br />

            @{
                string formattedBirthdate = Model.Customer.Birthdate.HasValue ? Model.Customer.Birthdate.Value.ToString("yyyy-MM-dd") : DateTime.Now.ToString("yyyy-MM-dd");
            }

            <div class="d-flex flex-row justify-content-between ">
                <div class="form-group">
                    @Html.LabelFor(x => x.Customer.Birthdate, "Data di Nascità")
                    @Html.MyDate(x=>x.Customer.Birthdate)
                    
                    @* Versione Classica *@
                    @*@Html.EditorFor(x => x.Customer.Birthdate, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               type = "date",
                               value = formattedBirthdate
                           }
                        })*@

                    @Html.ValidationMessageFor(x => x.Customer.Birthdate)
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.Customer.MembershipTypeId, "Tipo di iscrizione")
                    @Html.DropDownListFor(x => x.Customer.MembershipTypeId
                    , new SelectList(Model.MembershipTypes, "Id", "Name")
                    , "Seleziona un tipo di iscrizione"
                    , new { @class = "form-control" })
                </div>
            </div>
            <br />
            <div class="d-flex flex-row justify-content-between  ">
                <div class="checkbox ">
                    @Html.CheckBoxFor(x => x.Customer.IsSubscribedToNewsletter)
                    @Html.LabelFor(x => x.Customer.IsSubscribedToNewsletter, "Iscrivi alla NewsLetter")
                </div>
                <button type="submit" class="btn btn-primary">
                    Save
                </button>
            </div>
        </div>
    </div>
    
    @Html.HiddenFor(x => x.Customer.Id);
    @Html.AntiForgeryToken()
}


@section scripts{
    @Scripts.Render("~/bundles/jqueryval")
}

